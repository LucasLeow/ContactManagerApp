-- INITIAL SKELETON SETUP --

	- Valid for any projects using Express
	- May have to install different dependencies based on use case / requirements

	1) Create Project Directory 
	2) Create Directory: project-backend
	3) cd into project-backend, npm init
				{
			  "name": "project-backend",
			  "version": "1.0.0",
			  "description": "backend api files",
			  "main": "server.js",
			  "scripts": {
				"test": "echo \"Error: no test specified\" && exit 1"
			  },
			  "author": "lucas",
			  "license": "MIT"
			}

	4) create server.js (entry point, may be named index.js / app.js in other projects)
	5) npm install express
	6) npm i -D nodemon
	7) Open package.json, edit scripts key
		- "start": "node server.js",
		- "dev": "nodemon server.js"
		
	8) npm i dotenv (to handle .env packages to fetch PORT)
	9) create .env file
		- PORT=5001 (no semi-colons)
		- CONNECTION_STRING = <mongoDB Connection String> here later> (Dont need add at this point)
		
	10) Set up express in server.js
	
			```
			
			const express = require("express");
			const dotenv = require("dotenv").config();
			
			const app = express();
			const port = process.env.port;
			
			app.use(express.json()) // built-in middleware json parser
			
			app.listen(port, () => {
				console.log(`Server is running on ${port}`);
			})
			
			```
	11) npm run dev (to test skeleton server running properly)
		- should see console log msg
	

-- ROUTES (API) SETUP --

	- Routes may differ from project to project
	- Think about path before setting up
	- Routes in this project:
	- Utilize Express Router Class
		
		- Get all contacts - GET - /api/contacts
		- Get contact - GET - /api/contacts/:id
		- Create contact - POST - /api/contacts
		- Update contact - PUT - /api/contacts/:id
		- Delete contact - DELETE - /api/contacts/:id
		
	1) create "routes" directory
	2) create contactRoutes.js (may name other as desired)
		```
		const express = require("express");
		const router = express.Router();
		
		** MOST BASIC IMPLEMENTATION, CAN ABSTRACT ACTIONS TO CONTROLLERS DIR **
		** SEE BELOW FOR CONTROLLER IMPLEMENTATION **
		
				router.get('/', (req, res) => {
					res.json({"message":"Get all contact"});
				});
				
				router.get('/:id', (req, res) => {
					res.json({"message": "Get single contact"});
				});
				
				router.post('/', (req, res) => {
					res.json({"message":"Create new contact"});
				});
				
				router.put('/:id', (req, res) => {
					res.json({"message":"update contact"});
				});
				
				router.delete('/:id', (req, res) => {
					res.json({"message":"Delete desired contact"});
				});
				
				module.exports = router;
		```
	
	3) Inside server.js:
		```
		const routers = require("./routes/contactRoutes");
		
		// middleware fn mounted on specified path
		// 
		app.use('/api/contacts', routers);
		```
		
	** CONTROLLER IMPLEMENTATION FOR ROUTER ACTIONS **
		
	4) create "controllers" directory
		- to put router actions 
		
	5) create contactController.js
		- must include labels (description) for each action
		
			```
			
			//@desc Get all contacts
			//@route GET /api/contacts
			//@access public
			const getContacts = (req, res) => {
				res.status(200).json({"message":"Get all contact"});
			};
			
			//@desc Get single contact
			//@route GET /api/contacts/:id
			//@access public
			const getContact = (req, res) => {
				res.status(200).json({"message": "Get single contact"});
			};
			
			//@desc Create new contact
			//@route POST /api/contacts/:id
			//@access public
			const createContact = (req, res) => {
				res.status(201).json({"message":"Create new contact"});
			};
			
			//@desc update existing contact
			//@route PUT /api/contacts/:id
			//@access public
			const updateContact = (req, res) => {
				res.status(200).json({"message":"update contact"});
			};
			
			//@desc Delete contact
			//@route DELETE /api/contacts/:id
			//@access public
			const deleteContact = (req, res) => {
				res.status(200).json({"message":"Delete desired contact"});
			};
			
			module.exports = {
				getContacts,
				getContact,
				createContact,
				updateContact,
				deleteContact
			}
		
			```
			
	6) Go back to contactRoutes.js
	
		** FINALIZED VERSION OF contactRoutes.js **
	
		```
		const express = require("express");
		const router = express.Router();
		const { getContacts, getContact, createContact, updateContact, deleteContact } = require('../controllers/contactController');
		
				router
				.get('/', getContacts)
				.post('/', createContact)
				
				router
				.get('/:id', getContact)
				.put('/:id', updateContact)
				.delete('/:id', deleteContact)

				module.exports = router;
	
		```
		
-- ERROR HANDLING --

	- When receiving data (such as user details for POSTING)
		- sometimes, data incorrect format
		- want to check for these error
		
	1) Go to contactController.js
	
			```
			
			const createContact = (req, res) => {
			
				const { name, email, phone } = req.body;
				if (!name || !email || !phone) {
					res.status(400);
					throw new Error("All fields mandatory");
				}
				res.status(201).json({"message":"Create new contact"});
			};
	
			```
	
	2) Create custom middleware to convert HTML error message to JSON error message
		- create "middleware" dir
		
	3) Create errorHandler.js inside "middleware" dir
	
		** NOT THE FINAL CODE FOR custom errorHandler. Just for initial testing **
			- Test for JSON error message
			- Test for correct error message + statusCode parsed
			- See below for full implementation of Custom Error
	
		```
		
		const errorHandler = (err, req, res, next) => {
			const statusCode = res.statusCode ? res.statusCode : 500;
			res.json({message: err.message, stackTrace: err.stack});
		
		module.exports = errorHandler;
		
		```
	
	5) Go to server.js:
		
		add the following to the respective sections:
		
		const errorHandler = require("./middleware/errorhandler");
		
		
		app.use(errorHandler);
 	
	6) Create new file : errorCodes.js
	
		```
		exports.constants = {
			VALIDATION_ERROR: 400,
			UNAUTHORIZED: 401,
			FORBIDDEN:403,
			NOT_FOUND: 404
		};
		
		```
	7) Go back to errorHandler.js
	
	```
		const { errorCodes } = require("../errorCodes"); // path may differ depending on location

		const errorHandler = (err, req, res, next) => {
			const statusCode = res.statusCode ? res.statusCode : 500;
			switch(statusCode) {
				case errorCodes.VALIDATION_ERROR:
					res.json({type:"Validation failed", message: err.message, stackTrace: err.stack});
					break;
				case errorCodes.UNAUTHORIZED:
					res.json({type:"Unauthorized", message: err.message, stackTrace: err.stack});
					break;
				case errorCodes.FORBIDDEN:
					res.json({type:"Forbidden", message: err.message, stackTrace: err.stack});
					break;
				case errorCodes.NOT_FOUND:
					res.json({type:"Not Found", message: err.message, stackTrace: err.stack});
					break;
				case errorCodes.SERVER_ERROR:
					res.json({type:"Server Error", message: err.message, stackTrace: err.stack});
					break;
				default:
					console.log("No error. ")
					break;
			}
		}

		module.exports = errorHandler;
	 
	 ```
	 
	 

-- Add Async JS to Controller --
	- When interacting with MongoDB, return is a promise
	- To resolve promise, need to use Async JS 
		- adding async to all functions
		- when adding async, need to implement try catch block to handle errors for async fn
		- utilize Express built-in Async exception handler
	
	
	1) npm i express-async-handler
	
	2) Go to contactController.js
		const asyncHandler = require("express-async-handler");
		
	3) Add async keyword to all arrow functions inside controller
	
	4) Wrap the async function within asyncHandler
	
		```
		
		const asyncHandler = require("express-async-handler");
            //@desc Get all contacts
			//@route GET /api/contacts
			//@access public
			const getContacts = asyncHandler( async (req, res) => {
				res.status(200).json({"message":"Get all contact"});
			});			
			//@desc Get single contact
			//@route GET /api/contacts/:id
			//@access public
			const getContact = asyncHandler(async (req, res) => {
				res.status(200).json({"message": "Get single contact"});
			});
			
			//@desc Create new contact
			//@route POST /api/contacts/:id
			//@access public
			const createContact = asyncHandler(async (req, res) => {
                console.log(req.body)
                const { name, email, mobile } = req.body;
                if (!name || !email || !mobile) {
                    res.status(400);
                    throw new Error("All fields Mandatory");
                }
				res.status(201).json({"message":"Create new contact"});
			});
			
			//@desc update existing contact
			//@route PUT /api/contacts/:id
			//@access public
			const updateContact = asyncHandler(async (req, res) => {
				res.status(200).json({"message":"update contact"});
			});
			
			//@desc Delete contact
			//@route DELETE /api/contacts/:id
			//@access public
			const deleteContact = asyncHandler(async (req, res) => {
				res.status(200).json({"message":"Delete desired contact"});
			});
			
			module.exports = {
				getContacts,
				getContact,
				createContact,
				updateContact,
				deleteContact
			}
			
		```
		

-- Setting up MongoDB with Express --

	Collections : Where data is stored as JSON in MongoDB

	1) Go to MongoDB and login
	2) Select "Shared" Cluster (Free)
		- Choose Region (Singapore)
	3) Change cluster name to lucascluster then create Cluster
	4) Security Quickstart:
		user: admin
		pw: <as_desired>
		- connect from local env
		- add current IP Address
		Finish & Close
		- Wait for Cluster Creation (will take some time)
	5) click on created cluster & "Add my own Data"
	6) DB name : mycontacts-backend | Collections name: contacts
	7) Go to VSCode extension : download MongoDB for VS Code
	8) Go back to MongoDB lucascluster page -> overview
		- click on Connect (right corner) & select MongoDB for VScode
	9) Copy the connection string & add connection in VSCode 
		mongodb+srv://admin:<password>@lucascluster.hr7yd6q.mongodb.net/
		* Replace password with own pw, remove the <> symbol
	10) Go back to MongoDB -> Connect -> Drivers -> Select Node.js
		- copy the connection string
	11) Go to .env 
		```
		
		** REPLACE <PASSWORD> WITH OWN PASSWORD, REMOVE <> **
		
		CONNECTION_STRING = "mongodb+srv://admin:<password>@lucascluster.hr7yd6q.mongodb.net/mycontacts-backend?retryWrites=true&w=majority"
		```
		
	12) Create "config" dir in project
		- to connect with MongoDB on express, can use mongoose module
		- Mongoose : Object Data Model Design Schema
	
	13) Create dbConnection.js inside config dir
	14) npm i mongoose
	15) inside dbConnection.js:
		```
		const mongoose = require("mongoose");
		
		const connectDB = async () => {
			try {
				const connect = await mongoose.connect(process.env.CONNECTION_STRING);
				console.log("Database connected successfully",
				connect.connection.host,
				connect.connection.name);
				
			} catch (err) {
				console.log(err);
				process.exit(1);
			}
		}
		
		module.exports = connectDB;
		``
		
	16) Go to server.js
	
		```
		const connectDb = require("./config/dbConnection");
		
		connectDb();
		const app = express();
		const port = process.env.port;
		```
		
	17) Check that Database connected successfully logged in console
	
-- Creating Schema for Project (Contacts) --
(Linking Express to MongoDB via Mongoose ODM)

	1) Create new folder called "models"
	2) create "contactModel.js" file inside models
		```
		const mongoose = require("mongoose");
		
		const contactSchema = mongoose.Schema({
			name : {
				type: String,
				required : [true, "Please add contact name"]
			},
			email : {
				type: String,
				required : [true, "Please add contact email"]
			},
			phone : {
				type: String,
				required : [true, "Please add contact phone number"]
			}
		}, {
			timestamps : true
		});
		
		module.exports = mongoose.model("Contact", contactSchema);
		```
	3) go to contactController.js (API Actions)
	
		```
		
		const Contact = require("../models/contactModel");
		const asyncHandler = require("express-async-handler");
		//@desc Get all contacts
		//@route GET /api/contacts
		//@access public 
		const getContacts=asyncHandler(async (req, res) => {
			const contacts = await Contact.find();
			res.status(200).json(contacts);
		})
		//@desc Get desired contact
		//@route GET /api/contacts/:id
		//@access public 
		const getContact= asyncHandler(async (req, res) => {
			const contact = await Contact.findById(req.params.id);
			if (!contact) {
				res.status(404);
				throw new Error("Contact not found");
			}
			res.status(200).json(contact);
		})

		//@desc Create new contact
		//@route POST /api/contacts
		//@access public 
		const createContact= asyncHandler(async (req, res) => {
			console.log(req.body);
			const { name, email, phone } = req.body; 
			if (!name || !email || !phone) {
				res.status(400);
				throw new Error("All fields are required");
			}
			const contact = await Contact.create({
				name:name,
				email:email,
				phone:phone
			});
			res.status(201).json(contact);
		})

		//@desc Update  existing contact
		//@route PUT /api/contacts/:id
		//@access public 
		const updateContact= asyncHandler(async (req, res) => {
			const contact = await Contact.findById(req.params.id);
			if (!contact) {
				res.status(404);
				throw new Error("Contact not found, update fail");
			}
			const updatedContact = await Contact.findByIdAndUpdate(
				req.params.id,
				req.body,
				{new: true}
				);
			res.status(200).json(updatedContact);
		})

		//@desc delete  existing contact
		//@route DELETE /api/contacts/:id
		//@access public 
		const deleteContact= asyncHandler(async (req, res) => {
			const contact = await Contact.findById(req.params.id);
			if(!contact) {
				res.status(404);
				throw new Error("Contact not found");
			}
			await Contact.findByIdAndRemove(req.params.id);
			res.status(200).json(contact);
		});

		module.exports={
			getContacts,
			getContact,
			createContact,
			updateContact,
			deleteContact
		};
		
		```


-- User Authentication (Registration, Login) --

	1) Go to server.js
	
	add:
		app.use('/api/users', require("./routes/userRoutes"));
		
		// For user registration & login
		
	2) Go to routes dir, create userRoutes.js
	
		** NOT THE FINAL STATE OF userRoutes.js (Will be adding actions to userController.js)
		- Similar concept to contactController.js & contactRoutes.js
	
		```
		const express = require("express");
		const router = express.Router();

		router.post("/register", (req, res) => {
			res.json({message: "Register User"});
		})

		router.post("/login", (req, res) => {
			res.json({message: "Login User"});
		})

		// gives info. about current user
		router.get("/current", (req, res) => {
			res.json({message: "Current User Information"});
		})

		module.exports = router;
		```
		
	3) Go to "controllers" dir & create userController.js
	
		```
		const asyncHandler = require("express-async-handler");
		//@desc Register User
		//@route POST /api/users/register
		//@access public 
		const registerUser = asyncHandler(async (req, res) => {
			res.json({message: "Register User"});
		});

		//@desc User  Login
		//@route POST /api/users/login
		//@access public 
		const loginUser = asyncHandler(async (req, res) => {
			res.json({message: "Login User"});
		});

		//@desc Current User info 
		//@route POST /api/users/current
		//@access private 
		const currentUser = asyncHandler(async (req, res) => {
			res.json({message: "Current User Information"});
		});

		module.exports = { registerUser, loginUser, currentUser };
		```
	4) Go back to userRoutes.js
	
		```
		const express = require("express");
		const router = express.Router();
		const { registerUser, loginUser, currentUser } = require("../controllers/userController");

		router.post("/register", registerUser);
		router.post("/login", loginUser);

		// gives info. about current user
		router.get("/current", currentUser);

		module.exports = router;

		```
		
-- Creating Schema for Users --

	1) Go to "models" dir, create "userModel.js"
	
		```
		const mongoose = require("mongoose");

		const userSchema = mongoose.Schema({
			username : {
				type: String,
				required : [true, "Please add username"]
			},
			email : {
				type: String,
				required : [true, "Please add email"],
				unique: [true, "Email already taken!"] // allow only single use of email
			},
			password : {
				type: String,
				required : [true, "Please add password"]
			}
		}, {
			timestamps : true
		});

		module.exports = mongoose.model("User", userSchema);
		```
		
	2) Go to userController.js to link Schema to API actions