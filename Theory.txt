Title: Learn Node.js & Express with Project in 2 Hours
Link: https://www.youtube.com/watch?v=H9M02of22z4
Youtube


Content

1) Express Project Setup
2) Create Express Server
3) Thunder Client Setup (API Testing built within VSCode)
4) Express Router Setup (Routes)
5) Error Handling, Async Handler
6) Express Middleware
7) MongoDB Setup
8) Mongoose Schema (Communicate with DB)
9) CRUD API
10) User Authentication
11) Registration & Login API (Endpoints)
12) Controllers & DB Operations (Communicate with DB for different operations)
13) Password Hashing & Comparing
14) Sign / Verify JWT Token (JSON Web Token) (Authentication)
15) Handle r/s using Mongoose Schema for different documents
16) Protected Routes (Only authenticated users can access routes)
17) User Authorization (Only authorized user can access endpoints)
18) API Testing


Contact Manager Application


REST API Convention:
	- GET | PUT | POST | DELETE
	
	CRUD actions in project
	
		Crud Action - HTTP Method - Endpoints
		
		- Get all contacts - GET - /api/contacts
		- Get contact - GET - /api/contacts/:id
		- Create contact - POST - /api/contacts
		- Update contact - PUT - /api/contacts/:id
		- Delete contact - DELETE - /api/contacts/:id
		
		
Project Directory: 1_ContactManagerApp

Sub Directories:

mycontacts-backend
	- contains backend APIs
		1) npm init
			package name: mycontacts-backend-api
			entry point: server.js
			author: Lucas
			License: MIT
			
		2) Create server.js inside mycontacts-backend
		
		3) npm install express
		npm i -D nodemon
		
		4) inside package.json - scripts:
			- "start": "node server.js",
			- "dev": "nodemon server.js"
			
		5) npm i dotenv (to handle .env packages to fetch PORT)
			- built on node process module
	
		
		
General Overview of steps
1) server.js, app.listen for initial testing of server run

2) Set up routes
	- create routes dir
	- create contactRoutes.js
	- since all endpoint have same url, use route.route("/")
	- then within server.js, use app.use("/api/contacts") : the common path
	- set up Get Put Post Delete as required
	
3) Set up Controller (logic for request responses, connect to DB etc.)
	- create controller dir
	- create contactController.js
		- Whenever create API methods, must always give label
		
		



Interaction with DB
- Whenever interaction with MongoDB, always receive a promise
- Therefore, Async JS should be used



Middleware:

	- Express Async handler
		- to handle async exceptions
		- pass exception to errorHandle file that is already defined
	npm i express-async-handler
	
	
	inside API Controller:
		 
	const asyncHandler = require("express-async-handler")

	const getContacts = asyncHandler( async (req, res) => {
		res.status(200).json({message: "Get all contacts"});
	})